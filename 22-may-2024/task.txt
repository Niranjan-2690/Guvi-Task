Write a blog on Difference between HTTP1.1 vs HTTP2

HTTP1.1: 
	HTTP/1.1 which was created in 1997.
	HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it.
	It works on the textual format.
	There is head of line blocking that blocks all the requests behind it until it doesnâ€™t get its all resources.
	It uses requests resource Inlining for use getting multiple pages.
	It compresses data by itself.
HTTP2:
	HTTP/2 which was created in 2015.
	HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource.
	It works on the binary protocol.
	It allows multiplexing so one TCP connection is required for multiple requests.
	It uses PUSH frame by server that collects all multiple pages.
	It uses HPACK for data compression.

------------------------------------------------------------------------------------------------------------------------------------------------------

Write a blog about objects and its internal representation in Javascript

In the vast landscape of programming languages, JavaScript stands out as one of the most versatile and widely used. At its core, JavaScript employs a unique approach to 
handling data through objects. These objects serve as the fundamental building blocks of JavaScript programs, allowing developers to encapsulate data and functionality 
into coherent units. However, understanding how JavaScript represents these objects internally can deepen your understanding of the language and empower you to write 
more efficient and effective code.
	
In JavaScript, objects are collections of key-value pairs, where keys are strings (or symbols) and values can be of any data type, including other objects, functions,
or primitives like strings, numbers, and booleans. This flexible structure enables developers to model complex real-world entities and interactions in their applications.	
	
Understanding how JavaScript represents objects internally can have several implications for developers:
	1. Performance Considerations: Awareness of JavaScript's internal representation can help developers write more performant code by optimizing property access 
	patterns and minimizing unnecessary object mutations.
	2. Memory Management: By understanding how hidden classes and dictionaries impact memory usage, developers can design their data structures and object 
	interactions more efficiently, reducing memory overhead and improving overall application performance.
	3. Debugging and Profiling: Knowledge of JavaScript's internal representation can aid in debugging and profiling applications, allowing developers to identify 
	performance bottlenecks and optimize critical sections of code more effectively.

	


